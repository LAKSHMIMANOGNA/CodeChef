The most important observation that we need to make in this problem is

1. We will start from the nearest open bracket
2. Once we begin, we will have a contiguous substring

The reason is, we cannot delete an open bracket and deleting a closed bracket can only increase the length

-----

So, for each open bracket, we need

The nearest ending of the valid subsequence

-----

How do we do this ?

We can do this with a stack.
We will push the open brackets positions onto the stack
Everytime we come across a closed bracket, we will match it to the nearest open bracket which is on the top of the stack

-----

This will ensure that every open bracket will be matched to the ending of it's nearest subsequence, if it exists

This beautiful idea allows us to precompute the answers in O(N) time and to answer each query in O(1) time

-----

#include <iostream>
#include <vector>
#include <stack>

using namespace std;

void solve()
{
	string S;
	cin >> S;

	vector <int> nearest_end(S.size() + 5, -1);
	stack <int> positions;

	for(int i = 0; i < S.size(); i++)
	{
		switch(S[i])
		{
			case '(' : positions.push(i); break;

			case ')' : if(!positions.empty())
						{
							nearest_end[positions.top()] = i;
							positions.pop();
						}
		}
	}

	for(int i = S.size() - 1; i >= 0; i--)
	{
		if(S[i] == ')')
		{
			nearest_end[i] = nearest_end[i + 1];
		}
	}

	int no_of_queries;
	cin >> no_of_queries;

	while(no_of_queries--)
	{
		int p;
		cin >> p;

		cout << (nearest_end[p - 1] == -1 ? -1 : nearest_end[p - 1] + 1) << "\n";
	}
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

	int no_of_test_cases;
	cin >> no_of_test_cases;

	while(no_of_test_cases--)
		solve();

	return 0;
}
